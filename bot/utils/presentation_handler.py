import os
import logging
from typing import Callable, List, Tuple, Dict, Optional
from aiogram.types import Message
from bot.orchestrator import (
    orchestrator,
)  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
import aiofiles

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
DATA_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", "data"))
STAGES_OF_PRESENTATION_CREATION = [1, 2, 3, 4]


async def save_links_to_file(links: List[str], filename: str = "links.txt") -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª."""
    links_path = os.path.join(DATA_DIR, "table", filename)
    os.makedirs(os.path.dirname(links_path), exist_ok=True)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    try:
        async with aiofiles.open(links_path, "w") as file:
            await file.write("\n".join(links))
        return links_path
    except Exception as e:
        logger.error(f"Error saving links: {e}")
        raise


async def handle_error(
    e: Exception,
    message: Message,
    status_callback: Optional[Callable[[str], None]] = None,
    specific_message: Optional[str] = None,
):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è."""
    error_message = specific_message or f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}"
    detailed_error = f"‚ÄºÔ∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:*\n```\n{str(e)}\n```"

    logger.error(error_message, exc_info=True)

    if status_callback:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π callback, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        await status_callback(error_message)

    await message.answer(detailed_error, parse_mode="MarkdownV2")


async def update_status(
    message: Message,
    log_message: str,
    status_callback: Optional[Callable[[str], None]] = None,
):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞."""
    try:
        if status_callback:
            await status_callback(log_message)
        logger.info(log_message)
        await message.answer(log_message)
    except Exception as e:
        logger.error(f"Error updating status: {e}")


def get_processing_stages(
    client_name: Optional[str] = None,
) -> List[Tuple[str, str, Dict[str, str], str]]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)."""
    return [
        (
            "üîÑ –≠—Ç–∞–ø 1/5: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...",
            "cian_deep_page_parser",
            {
                "INPUT_PATH": "/app/data/table/links.txt",
                "OUTPUT_PATH": "/app/data/table/data.csv",
            },
            "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 2/5: –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...",
            "rewriter_image",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "MAX_SYMBOL": "500",
                "COLUMN_NAME": "–û–ø–∏—Å–∞–Ω–∏–µ",
            },
            "‚úÖ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 3/5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...",
            "image_processor",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "MASK_DIR_PATH": "/app/data/mask/",
                "BASE_IMAGE_DIR_PATH": "/app/data/presentation/pic/",
            },
            "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 4/5: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...",
            "presentation_image",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "OUTPUT_PATH": "/app/data/presentation/output/",
                "PIC_PATH": "/app/data/presentation/pic/",
                "TEMPLATE_PATH": "/app/data/presentation/template/–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π_–±–µ–ª—ã–π_—à–∞–±–ª–æ–Ω.pptx",
            },
            "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 5/5: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü—É...",
            "sheet_tools_image",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "PRESENTATION_PATH": "/app/data/presentation/output/",
                "CONFIG_PATH": "/app/data/config/config.env",
                "CLIENT_NAME": client_name,
            },
            "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        ),
    ]


async def process_stage(
    stage_info: Tuple[str, str, Dict[str, str], str],
    message: Message,
    status_callback: Callable[[str], None],
) -> Tuple[bool, str]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ø–∞."""
    start_message, image_name, environment, end_message = stage_info

    try:
        await update_status(message, start_message, status_callback)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        logs, exit_code = await orchestrator.run_container(
            image_name, environment=environment
        )

        if exit_code != 0:
            error_msg = f"–≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {exit_code})"
            await message.answer(f"```\n{logs[-4000:]}\n```", parse_mode="MarkdownV2")
            return False, logs

        await update_status(message, end_message, status_callback)
        return True, logs

    except Exception as e:
        logger.error(f"Stage error: {e}", exc_info=True)
        return False, str(e)


async def process_links_with_orchestrator(
    links: List[str],
    message: Message,
    client_name: Optional[str] = None,
    status_callback: Optional[Callable[[str], None]] = None,
) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤."""
    try:
        await save_links_to_file(links)
        stages = get_processing_stages(client_name)
        logs = []

        await update_status(message, "üìù –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫...", status_callback)

        for stage_index, stage_info in enumerate(stages, start=1):
            success, stage_logs = await process_stage(
                stage_info, message, status_callback
            )
            logs.append(stage_logs)

            if not success:
                error_msg = f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ {stage_index}: {stage_info[0]}"
                await handle_error(Exception(error_msg), message, status_callback)

                if stage_index not in STAGES_OF_PRESENTATION_CREATION:
                    return True
                return False

        await update_status(
            message, "üéâ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!", status_callback
        )
        return True

    except Exception as e:
        await handle_error(e, message, status_callback)
        return False
