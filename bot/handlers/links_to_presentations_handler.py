import os
import re
import logging
import asyncio
from aiogram import Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.utils.presentation_handler import process_links_with_orchestrator

logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫
URL_REGEX_CIAN = re.compile(
    r"^(https?:\/\/)?([\w-]+\.)?cian\.ru([\/\w\.\-\?&=%]*)?$",
    re.IGNORECASE
)

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏
PRESENTATION_DIR = os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..", "..", "data", "presentation", "output")
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
links_to_presentations_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class LinkStates(StatesGroup):
    waiting_for_links = State()
    waiting_for_client_name = State()
    processing_links = State()


@links_to_presentations_router.message(Command("links_to_presentations"))
async def links_to_presentations(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /links_to_presentations."""
    current_state = await state.get_state()

    if current_state:
        await message.answer(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    await message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel")
    await state.set_state(LinkStates.waiting_for_client_name)


@links_to_presentations_router.message(LinkStates.waiting_for_client_name)
async def handle_client_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏."""
    client_name = message.text.strip()
    if not client_name:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    await state.update_data(client_name=client_name)
    await message.answer("üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel")
    await state.set_state(LinkStates.waiting_for_links)


@links_to_presentations_router.message(LinkStates.waiting_for_links)
async def handle_links(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É."""
    try:
        links = [link.strip() for link in message.text.splitlines() if link.strip()]
        invalid_links = [link for link in links if not URL_REGEX_CIAN.match(link)]

        if invalid_links:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏.\n\n"
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:\n{chr(10).join(invalid_links)}"
            )
            return

        if not links:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.")
            return

        data = await state.get_data()
        client_name = data.get("client_name")
        if not client_name:
            await message.answer("üö® –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
            return

        await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}\n\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        await state.set_state(LinkStates.processing_links)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(process_links_task(links, message, client_name, state))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫: {e}", exc_info=True)
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
        await state.clear()


async def process_links_task(links, message, client_name, state: FSMContext):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤."""
    try:
        output_status = await process_links_with_orchestrator(links, message, client_name)

        if output_status:
            await message.answer("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...")

            files_sent = 0
            for file_name in os.listdir(PRESENTATION_DIR):
                file_path = os.path.join(PRESENTATION_DIR, file_name)
                if os.path.isfile(file_path):
                    try:
                        document = FSInputFile(file_path)
                        await message.answer_document(document)
                        files_sent += 1
                        logger.info(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_name}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}", exc_info=True)

            if files_sent == 0:
                await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

        else:
            await message.answer("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫. –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫: {e}", exc_info=True)
        await message.answer("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!")

    finally:
        await state.clear()