from aiogram import Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
import logging
import re

from bot.utils import process_links_with_orchestrator

logger = logging.getLogger(__name__)

URL_REGEX_CIAN = re.compile(
    r"^(https?:\/\/)?([\w-]+\.)?cian\.ru([\/\w\.\-\?&=%]*)?$",
    re.IGNORECASE
)

# –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
PRESENTATION_DIR = os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..", "..", "data", "presentation", "output")
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
links_to_presentations_router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class LinkStates(StatesGroup):
    waiting_for_links = State()
    waiting_for_client_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    processing_links = State()  # –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫


@links_to_presentations_router.message(Command("links_to_presentations"))
async def links_to_presentations(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /links_to_presentations."""
    current_state = await state.get_state()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if current_state and current_state.startswith("LinkStates"):
        await message.answer(
            "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞! \n"
            "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏.\n"
        )
        return

    await message.answer(
        "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel"
    )
    await state.set_state(LinkStates.waiting_for_client_name)


@links_to_presentations_router.message(LinkStates.waiting_for_client_name)
async def handle_client_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏."""
    client_name = message.text.strip()

    if not client_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(client_name=client_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—Å—ã–ª–æ–∫
    await message.answer(
        "üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /cancel"
    )
    await state.set_state(LinkStates.waiting_for_links)


@links_to_presentations_router.message(LinkStates.waiting_for_links)
async def handle_links(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        links = message.text.strip().splitlines()
        links_clean = [link for link in links if link not in ["", "\n"]]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π
        invalid_links = [link for link in links_clean if not URL_REGEX_CIAN.match(link)]

        if invalid_links:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥
            await message.answer(
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏. \n\n"
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: \n{chr(10).join(invalid_links)}"
            )
            return

        if not links_clean:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.")
            return

        data = await state.get_data()
        client_name = data.get("client_name")

        if not client_name:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞."
            )
            return

        await message.answer(
            f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}\n\n"
            f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –æ—Ç–º–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫
        await state.set_state(LinkStates.processing_links)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
        output_status = await process_links_with_orchestrator(
            links, message, client_name
        )
        if output_status:
            await message.answer(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏..."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏
            for file_name in os.listdir(PRESENTATION_DIR):
                file_path = os.path.join(PRESENTATION_DIR, file_name)
                if os.path.isfile(file_path):
                    try:
                        document = FSInputFile(file_path)
                        await message.answer_document(document)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                        logger.info(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_name}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
                else:
                    logger.warning(f"–û–±—ä–µ–∫—Ç {file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.")
            await message.answer("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

        else:
            error_processing_message = (
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
            )
            await message.answer(error_processing_message)
            logger.warning(error_processing_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫: {e}", exc_info=True)
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!")
    finally:
        # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        await state.clear()