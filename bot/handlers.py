from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import os
import logging
import re

from ..utils import process_links_with_orchestrator, get_log_file

URL_REGEX = re.compile(
    r"^(https?:\/\/)?"  # –ü—Ä–æ—Ç–æ–∫–æ–ª (http –∏–ª–∏ https)
    r"([\da-z\.-]+)\.([a-z\.]{2,6})"  # –î–æ–º–µ–Ω
    r"([\/\w\.-]*)*\/?$"  # –ü—É—Ç—å
)
# –ü–∞–ø–∫–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
PRESENTATION_DIR = os.path.abspath(
    os.path.join(os.path.dirname(__file__), "..", "..", "data", "presentation", "output")
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class LinkStates(StatesGroup):
    waiting_for_links = State()
    waiting_for_client_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞


# –ü–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis –∏–ª–∏ –¥—Ä—É–≥–æ–π storage)
storage = MemoryStorage()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
EXIT_COMMAND = "–≤—ã—Ö–æ–¥"

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/links_to_presentations - –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.\n"
        "/logs - –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    )


@router.message(Command("links_to_presentations"))
async def links_to_presentations_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /links_to_presentations."""
    await message.answer(
        "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏."
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    await state.set_state(LinkStates.waiting_for_client_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(Command("cancel"))
@router.message(F.text.lower() == EXIT_COMMAND)
async def cancel_handler(message: Message, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–º–µ–Ω–∏—Ç—å –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.message(LinkStates.waiting_for_client_name)
async def handle_client_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏."""
    client_name = message.text.strip()

    if not client_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(client_name=client_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å—Å—ã–ª–æ–∫
    await message.answer(
        "üîó –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ (–∫–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)."
    )
    await state.set_state(LinkStates.waiting_for_links)


@router.message(LinkStates.waiting_for_links)
async def handle_links(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    links = message.text.strip().splitlines()
    links_clean = [link for link in links if link not in ["", "\n"]]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π
    invalid_links = [link for link in links_clean if not URL_REGEX.match(link)]

    if invalid_links:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏. \n\n"
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: \n{chr(10).join(invalid_links)}"
        )
        return

    if not links_clean:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É.")
        return

    data = await state.get_data()
    client_name = data.get("client_name")

    if not client_name:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞."
        )
        return

    await message.answer(
        f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}"
    )

    log_file = get_log_file()  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
        output_status = await process_links_with_orchestrator(
            links, log_file, message, client_name
        )
        if output_status:
            await message.answer(
                "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏..."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏
            for file_name in os.listdir(PRESENTATION_DIR):
                file_path = os.path.join(PRESENTATION_DIR, file_name)
                if os.path.isfile(file_path):
                    try:
                        document = FSInputFile(file_path)
                        await message.answer_document(
                            document
                        )  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                        logging.info(f"–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_name}")
                    except Exception as e:
                        logging.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True
                        )
                else:
                    logging.warning(f"–û–±—ä–µ–∫—Ç {file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º.")
            await message.answer("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")

        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
            )
            logging.warning(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ , –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.message(Command("logs"))
async def send_logs(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    log_path = os.path.join(os.path.dirname(__file__), "..","logs")
    log_files = sorted(
        [os.path.join(log_path, f) for f in os.listdir(log_path) if f.endswith(".log")],
        key=lambda x: os.path.getmtime(os.path.join("logs", x)),
        reverse=True,
    )

    if log_files:
        last_log_file = os.path.join("logs", log_files[0])
        await message.answer_document(
            FSInputFile(last_log_file)
        )  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥
    else:
        await message.answer("–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")