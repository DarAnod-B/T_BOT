import os
import logging
import uuid
from orchestrator import run_container
from typing import Callable
from aiogram.types import Message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
DATA_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data"))
LOG_DIR = os.path.join(os.path.dirname(__file__), "logs")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(LOG_DIR, exist_ok=True)


def get_log_file() -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    log_filename = f"log_{uuid.uuid4()}.log"
    return os.path.join(LOG_DIR, log_filename)


def save_links_to_file(links, filename="links.txt") -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª."""
    links_path = os.path.join(DATA_DIR, "table", filename)
    os.makedirs(os.path.dirname(links_path), exist_ok=True)
    with open(links_path, "w") as file:
        file.write("\n".join(links))
    return links_path

async def handle_error(e, message, status_callback, specific_message=None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    error_message = specific_message or f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}"
    await update_status(message, error_message, status_callback)
    logging.error(error_message, exc_info=True)

async def update_status(
    message: Message, log_message: str, status_callback: Callable[[str], None] = None
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ –ª–æ–≥–∏—Ä—É–µ—Ç."""
    if status_callback:
        status_callback(log_message)
    logging.info(log_message)
    await message.answer(log_message)


async def process_links_with_orchestrator(
    links,
    log_file: str,
    message: Message,
    client_name: str = None,
    status_callback: Callable[[str], None] = None,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    logging.basicConfig(filename=log_file, level=logging.INFO)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ñ–∞–π–ª
    save_links_to_file(links)

    try:
        stages = [
            (
                "üîÑ –≠—Ç–∞–ø 1/4: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...",
                "parser_image",
                {
                    "INPUT_PATH": "/app/data/table/links.txt",
                    "OUTPUT_PATH": "/app/data/table/data.csv",
                },
                "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
            ),
            (
                "üîÑ –≠—Ç–∞–ø 2/4: –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...",
                "rewriter_image",
                {
                    "INPUT_PATH": "/app/data/table/data.csv",
                    "MAX_SYMBOL": "995",
                    "COLUMN_NAME": "–û–ø–∏—Å–∞–Ω–∏–µ",
                },
                "‚úÖ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            ),
            (
                "üîÑ –≠—Ç–∞–ø 3/4: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...",
                "presentation_image",
                {
                    "INPUT_PATH": "/app/data/table/data.csv",
                    "OUTPUT_PATH": "/app/data/presentation/output/",
                    "TEMPLATE": "/app/data/presentation/template/–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π_–±–µ–ª—ã–π_—à–∞–±–ª–æ–Ω.pptx",
                },
                "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            ),
            (
                "üîÑ –≠—Ç–∞–ø 4/4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü...",
                "sheet_tools_image",
                {
                    "INPUT_PATH": "/app/data/table/data.csv",
                    "PRESENTATION_PATH": "/app/data/presentation/output/",
                    "CONFIG_PATH": "/app/data/config.env",
                    "CLIENT_NAME":client_name,
                },
                "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            ),
        ]

        logs = []
        await update_status(message, "üìù –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫...", status_callback)

        for stage_info in stages:
            start_message, image_name, environment, end_message = stage_info
            await update_status(message, start_message, status_callback)
            stage_logs = run_container(image_name, environment=environment)
            logs.append(stage_logs)
            await update_status(message, end_message, status_callback)

        await update_status(
            message, "üéâ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!", status_callback
        )
        return logs
    except OSError as e:
        if e.winerror == 121:
            await handle_error(e, message, status_callback, 
                            specific_message="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        else:
            await handle_error(e, message, status_callback)
            raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞") from e

    except Exception as e:
        await handle_error(e, message, status_callback)
        raise RuntimeError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞") from e





