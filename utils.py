import os
import logging
import uuid
from typing import Callable, List, Tuple, Dict
from aiogram.types import Message
from .orchestrator import run_container

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
DATA_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "data"))
LOG_DIR = os.path.join(os.path.dirname(__file__), "logs")
STAGES_OF_PRESENTATION_CREATION = [1, 2, 3, 4]

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(LOG_DIR, exist_ok=True)


def get_log_file() -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    log_filename = f"log_{uuid.uuid4()}.log"
    return os.path.join(LOG_DIR, log_filename)


def save_links_to_file(links: List[str], filename="links.txt") -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª."""
    links_path = os.path.join(DATA_DIR, "table", filename)
    os.makedirs(os.path.dirname(links_path), exist_ok=True)
    with open(links_path, "w") as file:
        file.write("\n".join(links))
    return links_path


async def handle_error(
    e: Exception, message: Message, status_callback: Callable[[str], None] = None, specific_message: str = None
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    error_message = specific_message or f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}"
    detailed_error = f"‚ÄºÔ∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:*\n```\n{str(e)}\n```"

    logging.error(error_message, exc_info=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ callback (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    if status_callback:
        status_callback(error_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    await message.answer(detailed_error, parse_mode="MarkdownV2")


async def update_status(
    message: Message, log_message: str, status_callback: Callable[[str], None] = None
):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏ –ª–æ–≥–∏—Ä—É–µ—Ç."""
    if status_callback:
        status_callback(log_message)
    logging.info(log_message)
    await message.answer(log_message)


def get_processing_stages(client_name: str = None) -> List[Tuple[str, str, Dict[str, str], str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫."""
    return [
        (
            "üîÑ –≠—Ç–∞–ø 1/5: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...",
            "cian_deep_page_parser",
            {
                "INPUT_PATH": "/app/data/table/links.txt",
                "OUTPUT_PATH": "/app/data/table/data.csv",
            },
            "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 2/5: –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...",
            "rewriter_image",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "MAX_SYMBOL": "995",
                "COLUMN_NAME": "–û–ø–∏—Å–∞–Ω–∏–µ",
            },
            "‚úÖ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 3/5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...",
            "image_processor",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "MASK_DIR_PATH": "/app/data/mask/",
                "BASE_IMAGE_DIR_PATH":  "/app/data/presentation/pic/",
            },
            "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 4/5: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...",
            "presentation_image",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "OUTPUT_PATH": "/app/data/presentation/output/",
                "PIC_PATH": "/app/data/presentation/pic/",
                "TEMPLATE_PATH": "/app/data/presentation/template/–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π_–±–µ–ª—ã–π_—à–∞–±–ª–æ–Ω.pptx",
            },
            "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        ),
        (
            "üîÑ –≠—Ç–∞–ø 5/5: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü...",
            "sheet_tools_image",
            {
                "INPUT_PATH": "/app/data/table/data.csv",
                "PRESENTATION_PATH": "/app/data/presentation/output/",
                "CONFIG_PATH": "/app/data/config/config.env",
                "CLIENT_NAME": client_name,
            },
            "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        ),
    ]


async def process_stage(
    stage_info: Tuple[str, str, Dict[str, str], str], message: Message, status_callback: Callable[[str], None]
) -> Tuple[bool, str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —ç—Ç–∞–ø —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."""
    start_message, image_name, environment, end_message = stage_info
    await update_status(message, start_message, status_callback)

    stage_logs, exit_code = run_container(image_name, environment=environment)

    if exit_code != 0:
        return False, stage_logs

    await update_status(message, end_message, status_callback)
    return True, stage_logs


async def process_links_with_orchestrator(
    links: List[str], log_file: str, message: Message, client_name: str = None, status_callback: Callable[[str], None] = None
) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ —Å –ø–æ–º–æ—â—å—é –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏."""
    logging.basicConfig(filename=log_file, level=logging.INFO)
    save_links_to_file(links)

    try:
        stages = get_processing_stages(client_name)
        logs = []

        await update_status(message, "üìù –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫...", status_callback)

        for stage_index, stage_info in enumerate(stages, start=1):
            success, stage_logs = await process_stage(stage_info, message, status_callback)
            logs.append(stage_logs)
            if not success:
                await handle_error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞: {stage_info[0]}", message, status_callback
                )
                if stage_index not in STAGES_OF_PRESENTATION_CREATION:
                    return True
                else:
                    return False

        await update_status(message, "üéâ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!", status_callback)
        return True
    except OSError as e:
        if getattr(e, "winerror", None) == 121:
            await handle_error(
                e, message, status_callback, specific_message="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
            )
        else:
            await handle_error(e, message, status_callback)
        return False
    except Exception as e:
        await handle_error(e, message, status_callback)
        return False